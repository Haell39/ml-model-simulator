import io
import streamlit as st
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, roc_curve, auc
from sklearn.preprocessing import StandardScaler
import seaborn as sns
import matplotlib.pyplot as plt

st.set_page_config(page_title="An√°lise de Dados e Modelagem", page_icon="üìä", layout="wide")

st.title("üìä Ferramenta de An√°lise de Dados e Machine Learning")
st.write("Uma solu√ß√£o para an√°lise de dados e modelagem preditiva. Esta aplica√ß√£o integra um m√≥dulo de An√°lise Explorat√≥ria (EDA) com histogramas, mapas de calor e gr√°ficos de dispers√£o, a um poderoso simulador que permite treinar, ajustar e avaliar m√∫ltiplos algoritmos de Machine Learning, incluindo a visualiza√ß√£o de Curvas ROC e m√©tricas completas.")

with st.sidebar:
    st.header("1. Carregue seus Dados")
    uploaded_file = st.file_uploader("Escolha um arquivo CSV", type="csv")
    params = {}

if uploaded_file is not None:
    df = pd.read_csv(uploaded_file)
    df.dropna(axis=1, how='all', inplace=True)
    df.dropna(inplace=True)
    df.reset_index(drop=True, inplace=True)

    if df.empty:
        st.error("Erro: Ap√≥s a limpeza, o conjunto de dados ficou vazio.")
        st.stop()

    st.success("Arquivo carregado e dados limpos com sucesso!")
    eda_tab, model_tab = st.tabs(["An√°lise Explorat√≥ria (EDA)", "Simulador de Modelos"])

    with eda_tab:
        st.header("An√°lise Explorat√≥ria dos Dados")

        # 1. Vis√£o Geral
        st.subheader("1. Vis√£o Geral do Dataset")
        st.dataframe(df.head())

        # 2. Estat√≠sticas
        st.subheader("2. Estat√≠sticas Descritivas")
        st.dataframe(df.describe())

        # 3. Distribui√ß√£o
        st.subheader("3. Distribui√ß√£o das Vari√°veis Num√©ricas")
        numeric_columns = df.select_dtypes(include=['number']).columns.tolist()
        if numeric_columns:
            selected_col = st.selectbox("Selecione uma vari√°vel:", options=numeric_columns)
            if selected_col:
                fig, ax = plt.subplots(figsize=(12, 5))
                sns.histplot(df[selected_col], kde=True, ax=ax)
                ax.set_title(f'Distribui√ß√£o de {selected_col}')
                st.pyplot(fig)
        else:
            st.warning("N√£o h√° colunas num√©ricas para plotar.")

        # 4. Correla√ß√£o
        st.subheader("4. Matriz de Correla√ß√£o")
        if numeric_columns:
            corr_matrix = df[numeric_columns].corr()
            fig, ax = plt.subplots(figsize=(10, 6))
            sns.heatmap(corr_matrix, annot=True, fmt=".2f", cmap="coolwarm", ax=ax, annot_kws={"size": 6})
            ax.set_title("Mapa de Calor da Correla√ß√£o")
            st.pyplot(fig)
        else:
            st.warning("N√£o h√° colunas num√©ricas para calcular correla√ß√£o.")

        # 5. Vari√°veis Categ√≥ricas
        st.subheader("5. An√°lise de Vari√°veis Categ√≥ricas")
        categorical_columns = df.select_dtypes(include=['object', 'category']).columns.tolist()
        if categorical_columns:
            cat_col = st.selectbox("Selecione uma vari√°vel categ√≥rica para an√°lise:", options=categorical_columns,
                                   key='cat_eda')
            if cat_col:
                st.write("Contagem de valores:")
                st.dataframe(df[cat_col].value_counts())
                fig, ax = plt.subplots(figsize=(12, 5))
                sns.countplot(x=df[cat_col], ax=ax, order=df[cat_col].value_counts().index)
                ax.set_title(f'Contagem de {cat_col}')
                plt.xticks(rotation=45)
                st.pyplot(fig)
        else:
            st.info("O dataset n√£o possui vari√°veis categ√≥ricas para an√°lise.")

        # 6. Scatter Plot
        st.subheader("6. Rela√ß√£o entre Duas Vari√°veis (Scatter Plot)")
        if len(numeric_columns) >= 2:
            col1 = st.selectbox("Selecione a vari√°vel para o eixo X:", options=numeric_columns, index=0)
            col2 = st.selectbox("Selecione a vari√°vel para o eixo Y:", options=numeric_columns, index=1)
            fig, ax = plt.subplots(figsize=(12, 5))
            sns.scatterplot(data=df, x=col1, y=col2, ax=ax)
            ax.set_title(f'Rela√ß√£o entre {col1} e {col2}')
            st.pyplot(fig)
        else:
            st.info("S√£o necess√°rias pelo menos duas colunas num√©ricas para criar um gr√°fico de dispers√£o.")

        # 7. Box Plot
        st.subheader("7. An√°lise de Outliers (Box Plot)")
        if numeric_columns:
            outlier_col = st.selectbox("Selecione uma vari√°vel para an√°lise de outliers:", options=numeric_columns,
                                       key='outlier_eda')
            if outlier_col:
                fig, ax = plt.subplots(figsize=(12, 5))
                sns.boxplot(x=df[outlier_col], ax=ax)
                ax.set_title(f'Box Plot de {outlier_col}')
                st.pyplot(fig)
        else:
            st.info("N√£o h√° colunas num√©ricas para a an√°lise de outliers.")

    with model_tab:
        st.header("Simulador de Modelos de Machine Learning")
        with st.sidebar:
            st.header("2. Configura√ß√£o do Modelo")
            model_type = st.selectbox("Selecione o Modelo", ("Regress√£o Log√≠stica", "√Årvore de Decis√£o", "Random Forest"))
            if model_type == "Regress√£o Log√≠stica":
                params['C'] = st.slider("Regulariza√ß√£o (C)", 0.01, 10.0, 1.0)
                params['max_iter'] = st.slider("Itera√ß√µes", 100, 5000, 1000)
            elif model_type == "√Årvore de Decis√£o":
                params['max_depth'] = st.slider("Profundidade M√°xima", 2, 30, 10)
                params['criterion'] = st.selectbox("Crit√©rio", ("gini", "entropy"))
            elif model_type == "Random Forest":
                params['n_estimators'] = st.slider("N¬∫ de √Årvores", 10, 500, 100)
                params['max_depth'] = st.slider("Profundidade M√°xima", 2, 30, 10, key="rf_depth")
                params['criterion'] = st.selectbox("Crit√©rio", ("gini", "entropy"), key="rf_criterion")

        colunas = df.columns.tolist()
        target_variable = st.selectbox("Selecione a vari√°vel-alvo:", options=colunas, key="target_model")
        features_disponiveis = [col for col in colunas if col != target_variable]
        feature_variables = st.multiselect("Selecione as features:", options=features_disponiveis, default=features_disponiveis)
        st.write("---")

        if st.button("Treinar Modelo"):
            with st.spinner("Treinando e avaliando o modelo..."):
                X = df[feature_variables]
                y = df[target_variable]
                if y.dtype == 'object' or y.dtype.name == 'category':
                    unique_vals = y.unique()
                    if len(unique_vals) == 2:
                        y = y.map({unique_vals[0]: 0, unique_vals[1]: 1})
                    else:
                        st.error("Vari√°vel-alvo precisa ter 2 classes para a Curva ROC.")
                        st.stop()
                X = pd.get_dummies(X, drop_first=True)
                scaler = StandardScaler()
                X_scaled = scaler.fit_transform(X)
                X_scaled = pd.DataFrame(X_scaled, columns=X.columns)
                X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.3, random_state=42)

                if model_type == "Regress√£o Log√≠stica":
                    model = LogisticRegression(**params)
                elif model_type == "√Årvore de Decis√£o":
                    model = DecisionTreeClassifier(**params)
                else:
                    model = RandomForestClassifier(**params)

                model.fit(X_train, y_train)
                y_pred = model.predict(X_test)
                y_prob = model.predict_proba(X_test)[:, 1]
                accuracy = accuracy_score(y_test, y_pred)

                st.success("Modelo treinado com sucesso!")
                st.subheader("Resultados da Avalia√ß√£o do Modelo")

                res_tab1, res_tab2, res_tab3, res_tab4 = st.tabs(
                    ["M√©tricas", "Matriz de Confus√£o", "Comparativo & Curva ROC", "Probabilidades"]
                )

                with res_tab1:
                    st.metric(label="Acur√°cia", value=f"{accuracy:.2%}")
                    st.dataframe(pd.DataFrame(classification_report(y_test, y_pred, output_dict=True, zero_division=0)).transpose())

                with res_tab2:
                    st.subheader("Matriz de Confus√£o")
                    cm = confusion_matrix(y_test, y_pred)
                    fig, ax = plt.subplots(figsize=(5, 3.75), dpi=80)
                    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', ax=ax)
                    ax.set_xlabel('Previsto')
                    ax.set_ylabel('Verdadeiro')
                    buf = io.BytesIO()
                    fig.savefig(buf, format='png', bbox_inches='tight')
                    buf.seek(0)
                    st.image(buf, width=550)

                with res_tab3:
                    st.subheader("Curva ROC")
                    fpr, tpr, _ = roc_curve(y_test, y_prob)
                    roc_auc = auc(fpr, tpr)
                    fig, ax = plt.subplots(figsize=(5, 3.75), dpi=80)
                    ax.plot(fpr, tpr, color='blue', label=f'Curva ROC (√°rea = {roc_auc:.2f})')
                    ax.plot([0, 1], [0, 1], color='gray', linestyle='--')
                    ax.set_xlabel('Taxa de Falsos Positivos')
                    ax.set_ylabel('Taxa de Verdadeiros Positivos')
                    ax.legend(loc="lower right")
                    buf = io.BytesIO()
                    fig.savefig(buf, format='png', bbox_inches='tight')
                    buf.seek(0)
                    st.image(buf, width=500)

                    st.subheader("Comparativo de Modelos (Acur√°cia)")
                    resultados = {}
                    for nome, modelo in {
                        "Regress√£o Log√≠stica": LogisticRegression(max_iter=1000),
                        "√Årvore de Decis√£o": DecisionTreeClassifier(),
                        "Random Forest": RandomForestClassifier()
                    }.items():
                        modelo.fit(X_train, y_train)
                        pred = modelo.predict(X_test)
                        resultados[nome] = accuracy_score(y_test, pred)

                    st.markdown(
                        """
                        <style>
                        .df-container {max-width: 400px; margin-left: auto; margin-right: auto;}
                        </style>
                        """, unsafe_allow_html=True
                    )
                    st.markdown('<div class="df-container">', unsafe_allow_html=True)
                    st.dataframe(pd.DataFrame.from_dict(resultados, orient='index', columns=['Acur√°cia']))
                    st.markdown('</div>', unsafe_allow_html=True)

                with res_tab4:
                    st.subheader("Probabilidade por Amostra")
                    st.dataframe(pd.DataFrame({
                        "Real": y_test.values,
                        "Previsto": y_pred,
                        "Prob. Classe 1": y_prob
                    }).sort_values("Prob. Classe 1", ascending=False))
else:
    st.markdown("---")
    st.header("Bem-vindo ao Insight Navigator! üöÄ")

    st.markdown("""
        Esta √© a sua central de controle para projetos de Ci√™ncia de Dados. A ferramenta foi projetada para gui√°-lo atrav√©s do ciclo completo: da explora√ß√£o inicial de um dataset at√© a avalia√ß√£o detalhada de modelos preditivos.
        """)

    st.info("üëà **Para come√ßar, carregue um arquivo CSV usando o menu na barra lateral esquerda.**")

    st.subheader("Como Utilizar a Ferramenta:")
    st.markdown("""
        1.  **Carregue seus Dados:** No menu lateral, clique em 'Browse files' e selecione um arquivo CSV do seu computador.
        2.  **Explore (Aba EDA):** Ap√≥s o upload, a primeira aba lhe dar√° uma an√°lise completa do seu dataset. Navegue pelas estat√≠sticas, distribui√ß√µes e correla√ß√µes para entender seus dados a fundo.
        3.  **Modele (Aba Simulador):**
            * Na segunda aba, selecione sua **vari√°vel-alvo** e as **features**.
            * Na barra lateral, escolha um modelo de Machine Learning e ajuste seus **hiperpar√¢metros**.
            * Clique em **'Treinar Modelo'** e explore os resultados nas diversas abas de avalia√ß√£o.
        """)

    st.subheader("N√£o tem um dataset? Sem problemas!")
    st.markdown("Voc√™ pode baixar um dataset cl√°ssico de exemplo sobre diagn√≥stico de c√¢ncer de mama para testar todas as funcionalidades da ferramenta.")

    with open("data/Breast Cancer Wisconsin.csv", "r") as file:
        csv_data = file.read()

    #  bot√£o de download
    st.download_button(
        label="Clique aqui para baixar o dataset de exemplo",
        data=csv_data,
        file_name='Breast Cancer Wisconsin.csv',  # Nome do arquivo para o usu√°rio
        mime='text/csv',
    )

    st.markdown("---")
    st.markdown(
        "‚öôÔ∏è Desenvolvido por **[Rafael Andrade](https://www.linkedin.com/in/rafaelsantoshome/)** com Streamlit, Pandas, Scikit-learn, Matplotlib e Seaborn.")
